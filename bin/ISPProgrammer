#!/usr/bin/env python3
import logging
import click
import timeout_decorator
try:
    from nxp import retry, ISPChip, retry, BAUDRATES, LPC_TypeAChip
    from part_definitions import GetPartDescriptor
    from IODevices import UartDevice
except ImportError as e:
    print(e)
    from ISPProgrammer import ISPChip, retry, UartDevice, BAUDRATES, GetPartDescriptor, LPC_TypeAChip


def SetupChip(baudrate: int, device: str, crystal_frequency: int, chip_file: str, no_sync: bool = False, sleep_time : float = 1) -> LPC_TypeAChip:
    #print(baudrate, device, crystal_frequency, chip_file) 
    if(not no_sync):
        kStartingBaudRate = BAUDRATES[0]
    else:
        kStartingBaudRate = baudrate

    iodevice = UartDevice(device, baudrate=kStartingBaudRate)
    chip = LPC_TypeAChip(iodevice)
    chip.kSleepTime = sleep_time
    if(not no_sync):
        chip.InitConnection()

    chip.Echo(False)
    part_id = retry(chip.ReadPartID, count=100, exception=timeout_decorator.TimeoutError)()
    descriptor = GetPartDescriptor(chip_file, part_id)

    logging.info(f"{part_id}, {descriptor}")

    chip.CrystalFrequency = crystal_frequency#12000#khz == 30MHz
    chip.SectorCount = descriptor["SectorCount"]
    chip.RAMSize = descriptor["RAMSize"]
    chip.RAMRange = descriptor["RAMRange"]
    chip.FlashRange = descriptor["FlashRange"]
    chip.RAMStartWrite = descriptor["RAMStartWrite"]
    chip.kCheckSumLocation = 7 #0x0000001c

    if(chip.RAMRange[1]-chip.RAMRange[0] != chip.RAMSize - 1):
        raise ValueError("RAM size for {0x%x} is wrong".format(part_id))
    print("Setting new baudrate %d"%baudrate)
    chip.ChangeBaudRate(baudrate)
    return chip

@click.group()
@click.option('--device', '-d', default='/dev/ttyUSB0', help='Serial device')
@click.option('--baud', '-b', type=int, default=BAUDRATES[0], help='Baudrate')
@click.option('--crystal-frequency', '-c', type=int, default=12000,
              help="Crystal frequency of chip in khz")
@click.option('--config-file', '-f', default='/etc/lpctools_parts.def',
              help='Parts definition file')
@click.option('--echo', is_flag=True)
@click.option('--no-sync', is_flag=True)
@click.option('--sleep-time', '-s', type=float, default=0.25, help='Sleep time between commands')
@click.pass_context
def gr1(ctx, **kwargs):
    ctx.ensure_object(dict)
    ctx.obj.update(kwargs)
    ISPChip.SetEcho(kwargs['echo'])

    if ISPChip.GetEcho():
        logging.info("Echoing received data with <...>, and sent as [...]")


@gr1.command()
@click.pass_context
def QueryChip(ctx):
    SetupChip(ctx.obj['baud'], ctx.obj['device'], ctx.obj['crystal_frequency'], ctx.obj['config_file'], ctx.obj['no_sync'], ctx.obj['sleep_time'])


@gr1.command()
@click.pass_context
def MassErase(ctx):
    chip = SetupChip(ctx.obj['baud'], ctx.obj['device'], ctx.obj['crystal_frequency'], ctx.obj['config_file'], ctx.obj['no_sync'], ctx.obj['sleep_time'])
    chip.MassErase()
    logging.info("Mass Erase Successful")


@click.option('--start_sector', type=int, default=0, required=True, help='Sector to write to')
@click.option('--imagein', type=str, required=True, help='Location of hex file to program')
@gr1.command()
@click.pass_context
def WriteFlash(ctx, imagein, start_sector):
    chip = SetupChip(ctx.obj['baud'], ctx.obj['device'], ctx.obj['crystal_frequency'], ctx.obj['config_file'], ctx.obj['no_sync'], ctx.obj['sleep_time'])
    with open(imagein, 'rb') as f:
        image = f.read()
    retry(chip.WriteBinaryToFlash, count=2, exception=UserWarning, raise_on_fail=True)(image=image, start_sector=start_sector)


@click.option('--imagein', type=str, required=True, help='Location of hex file to program')
@gr1.command()
@click.pass_context
def WriteImage(ctx, imagein):
    chip = SetupChip(ctx.obj['baud'], ctx.obj['device'], ctx.obj['crystal_frequency'], ctx.obj['config_file'], ctx.obj['no_sync'], ctx.obj['sleep_time'])
    retry(chip.WriteImage, count=1, exception=UserWarning, raise_on_fail=True)(imagein)
    #chip.Go(0, ThumbMode=False)
    chip.Go(0)


@click.option('--imageout', type=str, required=True, help='Name of hex file output')
@gr1.command()
@click.pass_context
def ReadImage(ctx, imageout: str):
    chip = SetupChip(ctx.obj['baud'], ctx.obj['device'], ctx.obj['crystal_frequency'], ctx.obj['config_file'], ctx.obj['no_sync'], ctx.obj['sleep_time'])
    chip.ReadImage(imageout)


if __name__ == "__main__":
    logging.basicConfig()
    logging.getLogger().setLevel(logging.DEBUG)
    gr1()
